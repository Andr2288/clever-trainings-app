import mysql from 'mysql2/promise';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL (–±–µ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è)
const connectionConfig = {
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || '',
    multipleStatements: true
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è SQL —Ñ–∞–π–ª—É
const executeSQLFile = async (connection, filePath) => {
    try {
        const sql = fs.readFileSync(filePath, 'utf8');
        const statements = sql.split(';').filter(statement => statement.trim() !== '');

        for (const statement of statements) {
            if (statement.trim() !== '') {
                await connection.execute(statement + ';');
            }
        }
        console.log(`‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ: ${path.basename(filePath)}`);
    } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ ${path.basename(filePath)}:`, error.message);
        throw error;
    }
};

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
const setupDatabase = async () => {
    let connection;

    try {
        console.log('üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL...');
        connection = await mysql.createConnection(connectionConfig);
        console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MySQL');

        // –®–ª—è—Ö–∏ –¥–æ SQL —Ñ–∞–π–ª—ñ–≤
        const schemaPath = path.join(__dirname, '..', 'database_schema.sql');
        const seedPath = path.join(__dirname, '..', 'seed_data.sql');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—é—Ç—å —Ñ–∞–π–ª–∏
        if (!fs.existsSync(schemaPath)) {
            console.error('‚ùå –§–∞–π–ª database_schema.sql –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        if (!fs.existsSync(seedPath)) {
            console.error('‚ùå –§–∞–π–ª seed_data.sql –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        console.log('üîÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ö–µ–º–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...');
        await executeSQLFile(connection, schemaPath);

        console.log('üîÑ –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏...');
        await executeSQLFile(connection, seedPath);

        console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
        console.log('üìã –°—Ç–≤–æ—Ä–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ:');
        console.log('   - users (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ)');
        console.log('   - food_categories (–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—ñ–≤)');
        console.log('   - food_items (–ø—Ä–æ–¥—É–∫—Ç–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è)');
        console.log('   - daily_meals (—â–æ–¥–µ–Ω–Ω–µ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è)');
        console.log('   - workout_types (—Ç–∏–ø–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å)');
        console.log('   - workout_templates (—à–∞–±–ª–æ–Ω–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å)');
        console.log('   - completed_workouts (–∑–∞–≤–µ—Ä—à–µ–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è)');
        console.log('   - user_preferences (–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)');
        console.log('   - weight_history (—ñ—Å—Ç–æ—Ä—ñ—è –≤–∞–≥–∏)');
        console.log('');
        console.log('üîë –¢–µ—Å—Ç–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç:');
        console.log('   Email: test@example.com');
        console.log('   –ü–∞—Ä–æ–ª—å: password123');

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', error.message);
        console.log('');
        console.log('üîß –ú–æ–∂–ª–∏–≤—ñ —Ä—ñ—à–µ–Ω–Ω—è:');
        console.log('1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π MySQL —Å–µ—Ä–≤–µ—Ä');
        console.log('2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤ .env —Ñ–∞–π–ª—ñ');
        console.log('3. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —î –ø—Ä–∞–≤–∞ –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
        process.exit(1);
    } finally {
        if (connection) {
            await connection.end();
            console.log('üîê –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ MySQL –∑–∞–∫—Ä–∏—Ç–æ');
        }
    }
};

// –ó–∞–ø—É—Å–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
setupDatabase();