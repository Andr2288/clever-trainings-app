import mysql from 'mysql2/promise';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL (—Å–ø–æ—á–∞—Ç–∫—É –±–µ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö)
const connectionConfig = {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 3306,
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || '',
    charset: 'utf8mb4'
};

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
const dbConnectionConfig = {
    ...connectionConfig,
    database: process.env.DB_NAME || 'fitness_app_db'
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
const createDatabase = async () => {
    const connection = await mysql.createConnection(connectionConfig);
    try {
        await connection.query(`CREATE DATABASE IF NOT EXISTS \`${process.env.DB_NAME || 'fitness_app_db'}\``);
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—î');
    } finally {
        await connection.end();
    }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è SQL –∫–æ–º–∞–Ω–¥
const executeSQLCommands = async (connection, commands) => {
    for (const command of commands) {
        if (command.trim() && !command.trim().startsWith('--')) {
            try {
                console.log(`üìã –í–∏–∫–æ–Ω—É—î–º–æ: ${command.substring(0, 60).replace(/\n/g, ' ')}...`);
                await connection.query(command);
            } catch (error) {
                console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: ${error.message}`);
                console.error(`üìù –ö–æ–º–∞–Ω–¥–∞: ${command}`);
                throw error;
            }
        }
    }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
const createTables = async (connection) => {
    const createTableCommands = [
        // –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        `CREATE TABLE IF NOT EXISTS users (
            id INT AUTO_INCREMENT PRIMARY KEY,
            full_name VARCHAR(100) NOT NULL,
            email VARCHAR(100) UNIQUE NOT NULL,
            password VARCHAR(255) NOT NULL,
            profile_pic VARCHAR(255) DEFAULT NULL,
            age INT DEFAULT NULL,
            gender ENUM('male', 'female') DEFAULT NULL,
            weight DECIMAL(5,2) DEFAULT NULL,
            height INT DEFAULT NULL,
            activity_level ENUM('low', 'moderate', 'high') DEFAULT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        )`,

        // –¢–∞–±–ª–∏—Ü—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
        `CREATE TABLE IF NOT EXISTS food_categories (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(100) NOT NULL UNIQUE,
            description TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )`,

        // –¢–∞–±–ª–∏—Ü—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è
        `CREATE TABLE IF NOT EXISTS food_items (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(100) NOT NULL,
            category_id INT,
            calories_per_100g DECIMAL(8,2) NOT NULL,
            protein_per_100g DECIMAL(8,2) NOT NULL DEFAULT 0,
            fat_per_100g DECIMAL(8,2) NOT NULL DEFAULT 0,
            carbs_per_100g DECIMAL(8,2) NOT NULL DEFAULT 0,
            description TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (category_id) REFERENCES food_categories(id) ON DELETE SET NULL
        )`,

        // –¢–∞–±–ª–∏—Ü—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è
        `CREATE TABLE IF NOT EXISTS daily_meals (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id INT NOT NULL,
            food_item_id INT NOT NULL,
            quantity_grams DECIMAL(8,2) NOT NULL DEFAULT 100,
            consumed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            meal_date DATE NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
            FOREIGN KEY (food_item_id) REFERENCES food_items(id) ON DELETE CASCADE
        )`,

        // –¢–∞–±–ª–∏—Ü—è —Ç–∏–ø—ñ–≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
        `CREATE TABLE IF NOT EXISTS workout_types (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(100) NOT NULL UNIQUE,
            description TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )`,

        // –¢–∞–±–ª–∏—Ü—è —à–∞–±–ª–æ–Ω—ñ–≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
        `CREATE TABLE IF NOT EXISTS workout_templates (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(100) NOT NULL,
            type_id INT,
            duration_minutes INT NOT NULL,
            intensity ENUM('–õ–µ–≥–∫–∞', '–°–µ—Ä–µ–¥–Ω—è', '–í–∏—Å–æ–∫–∞') NOT NULL,
            fitness_level ENUM('beginner', 'intermediate', 'advanced') NOT NULL,
            description TEXT,
            equipment VARCHAR(255) DEFAULT '–ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (type_id) REFERENCES workout_types(id) ON DELETE SET NULL
        )`,

        // –¢–∞–±–ª–∏—Ü—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
        `CREATE TABLE IF NOT EXISTS completed_workouts (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id INT NOT NULL,
            workout_template_id INT,
            workout_name VARCHAR(100) NOT NULL,
            workout_type VARCHAR(50) NOT NULL,
            planned_duration_minutes INT NOT NULL,
            actual_duration_minutes INT NOT NULL,
            intensity VARCHAR(50) NOT NULL,
            completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            workout_date DATE NOT NULL,
            notes TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
            FOREIGN KEY (workout_template_id) REFERENCES workout_templates(id) ON DELETE SET NULL
        )`,

        // –¢–∞–±–ª–∏—Ü—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        `CREATE TABLE IF NOT EXISTS user_preferences (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id INT NOT NULL UNIQUE,
            fitness_level ENUM('beginner', 'intermediate', 'advanced') DEFAULT 'beginner',
            preferred_workout_types JSON,
            daily_calorie_goal INT,
            notifications_enabled BOOLEAN DEFAULT TRUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
        )`,

        // –¢–∞–±–ª–∏—Ü—è —ñ—Å—Ç–æ—Ä—ñ—ó –≤–∞–≥–∏
        `CREATE TABLE IF NOT EXISTS weight_history (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id INT NOT NULL,
            weight DECIMAL(5,2) NOT NULL,
            recorded_date DATE NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
            UNIQUE KEY unique_user_date (user_id, recorded_date)
        )`
    ];

    await executeSQLCommands(connection, createTableCommands);
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤
const createIndexes = async (connection) => {
    const indexCommands = [
        'CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)',
        'CREATE INDEX IF NOT EXISTS idx_daily_meals_user_date ON daily_meals(user_id, meal_date)',
        'CREATE INDEX IF NOT EXISTS idx_completed_workouts_user_date ON completed_workouts(user_id, workout_date)',
        'CREATE INDEX IF NOT EXISTS idx_food_items_name ON food_items(name)',
        'CREATE INDEX IF NOT EXISTS idx_workout_templates_level ON workout_templates(fitness_level)'
    ];

    await executeSQLCommands(connection, indexCommands);
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
const insertTestData = async (connection) => {
    console.log('üîÑ –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...');

    // –û—á–∏—â–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –¥–∞–Ω–∏—Ö
    const clearCommands = [
        'SET FOREIGN_KEY_CHECKS = 0',
        'TRUNCATE TABLE weight_history',
        'TRUNCATE TABLE user_preferences',
        'TRUNCATE TABLE completed_workouts',
        'TRUNCATE TABLE daily_meals',
        'TRUNCATE TABLE food_items',
        'TRUNCATE TABLE food_categories',
        'TRUNCATE TABLE workout_templates',
        'TRUNCATE TABLE workout_types',
        'TRUNCATE TABLE users',
        'SET FOREIGN_KEY_CHECKS = 1'
    ];

    await executeSQLCommands(connection, clearCommands);

    // –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
    const foodCategories = [
        `INSERT INTO food_categories (name, description) VALUES
        ('–§—Ä—É–∫—Ç–∏', '–°–≤—ñ–∂—ñ —Ç–∞ —Å—É—à–µ–Ω—ñ —Ñ—Ä—É–∫—Ç–∏'),
        ('–û–≤–æ—á—ñ', '–°–≤—ñ–∂—ñ –æ–≤–æ—á—ñ —Ç–∞ –∑–µ–ª–µ–Ω—å'),
        ('–ú\\'—è—Å–æ', '–ú\\'—è—Å–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ —Ç–∞ –ø—Ç–∏—Ü—è'),
        ('–ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏', '–ú–æ–ª–æ–∫–æ, —Å–∏—Ä, –∫–µ—Ñ—ñ—Ä —Ç–∞ —ñ–Ω—à—ñ –º–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏'),
        ('–ó–µ—Ä–Ω–æ–≤—ñ', '–ö—Ä—É–ø–∏, —Ö–ª—ñ–±, –º–∞–∫–∞—Ä–æ–Ω–∏'),
        ('–ì–æ—Ä—ñ—Ö–∏', '–ì–æ—Ä—ñ—Ö–∏ —Ç–∞ –Ω–∞—Å—ñ–Ω–Ω—è'),
        ('–ú–∞—Å–ª–∞', '–†–æ—Å–ª–∏–Ω–Ω—ñ —Ç–∞ —Ç–≤–∞—Ä–∏–Ω–Ω—ñ –∂–∏—Ä–∏'),
        ('–°–æ–ª–æ–¥–æ—â—ñ', '–¶—É–∫–µ—Ä–∫–∏, —à–æ–∫–æ–ª–∞–¥, –¥–µ—Å–µ—Ä—Ç–∏'),
        ('–ü—Ä–æ–¥—É–∫—Ç–∏ —Ç–≤–∞—Ä–∏–Ω–Ω–æ–≥–æ –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è', '–Ø–π—Ü—è —Ç–∞ —ñ–Ω—à—ñ –ø—Ä–æ–¥—É–∫—Ç–∏')`
    ];

    // –ü—Ä–æ–¥—É–∫—Ç–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è
    const foodItems = [
        `INSERT INTO food_items (name, category_id, calories_per_100g, protein_per_100g, fat_per_100g, carbs_per_100g, description) VALUES
        ('–Ø–±–ª—É–∫–æ', 1, 52, 0.3, 0.2, 14, '–°–≤—ñ–∂–µ —è–±–ª—É–∫–æ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É'),
        ('–ë–∞–Ω–∞–Ω', 1, 89, 1.1, 0.3, 23, '–°–æ–ª–æ–¥–∫–∏–π –±–∞–Ω–∞–Ω —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É'),
        ('–ë—Ä–æ–∫–æ–ª—ñ', 2, 34, 2.8, 0.4, 7, '–°–≤—ñ–∂–∞ –±—Ä–æ–∫–æ–ª—ñ'),
        ('–ö—É—Ä—è—á–∞ –≥—Ä—É–¥–∫–∞', 3, 165, 31, 3.6, 0, '–í—ñ–¥–≤–∞—Ä–µ–Ω–µ –∞–±–æ –∑–∞–ø–µ—á–µ–Ω–µ –∫—É—Ä—è—á–µ —Ñ—ñ–ª–µ'),
        ('–ú–æ–ª–æ–∫–æ', 4, 42, 3.4, 1, 5, '–ó–Ω–µ–∂–∏—Ä–µ–Ω–µ –º–æ–ª–æ–∫–æ'),
        ('–†–∏—Å', 5, 130, 2.7, 0.3, 28, '–í–∞—Ä–µ–Ω–∏–π –±—ñ–ª–∏–π —Ä–∏—Å'),
        ('–ú–∏–Ω–¥–∞–ª—å', 6, 579, 21, 50, 22, '–°—É—à–µ–Ω–∏–π –º—ñ–Ω–¥–∞–ª—å'),
        ('–û–ª–∏–≤–∫–æ–≤–∞ –æ–ª—ñ—è', 7, 884, 0, 100, 0, '–û–ª–∏–≤–∫–æ–≤–∞ –æ–ª—ñ—è –ø–µ—Ä—à–æ–≥–æ –≤—ñ–¥–∂–∏–º—É'),
        ('–ß–æ—Ä–Ω–∏–π —à–æ–∫–æ–ª–∞–¥', 8, 546, 7.8, 31, 63, '–ì—ñ—Ä–∫–∏–π —á–æ—Ä–Ω–∏–π —à–æ–∫–æ–ª–∞–¥ –∑ –≤–∏—Å–æ–∫–∏–º –≤–º—ñ—Å—Ç–æ–º –∫–∞–∫–∞–æ'),
        ('–Ø–π—Ü–µ', 9, 155, 13, 11, 1.1, '–í—ñ–¥–≤–∞—Ä–µ–Ω–µ —è–π—Ü–µ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É')`
    ];

    // –¢–∏–ø–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
    const workoutTypes = [
        `INSERT INTO workout_types (name, description) VALUES
        ('–ö–∞—Ä–¥—ñ–æ', '–ê–µ—Ä–æ–±–Ω—ñ –≤–ø—Ä–∞–≤–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–µ—Ä—Ü–µ–≤–æ-—Å—É–¥–∏–Ω–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏'),
        ('–°–∏–ª–æ–≤—ñ', '–í–ø—Ä–∞–≤–∏ –∑ –æ–±—Ç—è–∂–µ–Ω–Ω—è–º –¥–ª—è —Ä–æ–∑–≤–∏—Ç–∫—É –º\\'—è–∑–æ–≤–æ—ó –º–∞—Å–∏'),
        ('–†–æ–∑—Ç—è–∂–∫–∞', '–í–ø—Ä–∞–≤–∏ –¥–ª—è –≥–Ω—É—á–∫–æ—Å—Ç—ñ —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è'),
        ('–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ', '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ñ –≤–ø—Ä–∞–≤–∏ –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Ñ—ñ–∑–∏—á–Ω–æ—ó –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏'),
        ('HIIT', '–í–∏—Å–æ–∫–æ—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è')`
    ];

    // –®–∞–±–ª–æ–Ω–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
    const workoutTemplates = [
        `INSERT INTO workout_templates (name, type_id, duration_minutes, intensity, fitness_level, description, equipment) VALUES
        ('–°—Ç—Ä–∏–±–∫–∏ –∑ —Ä–æ–∑–≤–µ–¥–µ–Ω–Ω—è–º —Ä—É–∫ —ñ –Ω—ñ–≥', 1, 10, '–õ–µ–≥–∫–∞', 'beginner', '–°—Ç—Ä–∏–±–∫–∏ –Ω–∞ –º—ñ—Å—Ü—ñ –∑ —Ä–æ–∑–≤–µ–¥–µ–Ω–Ω—è–º —Ä—É–∫ —ñ –Ω—ñ–≥', '–ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ'),
        ('–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è –≤—ñ–¥ –ø—ñ–¥–ª–æ–≥–∏', 2, 5, '–õ–µ–≥–∫–∞', 'beginner', '–ö–ª–∞—Å–∏—á–Ω—ñ –≤—ñ–¥–∂–∏–º–∞–Ω–Ω—è –≤—ñ–¥ –ø—ñ–¥–ª–æ–≥–∏', '–ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ'),
        ('–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è', 2, 8, '–õ–µ–≥–∫–∞', 'beginner', '–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è –∑ –≤–ª–∞—Å–Ω–æ—é –≤–∞–≥–æ—é', '–ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ'),
        ('–ü–ª–∞–Ω–∫–∞', 2, 5, '–õ–µ–≥–∫–∞', 'beginner', '–£—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ª–æ–∂–µ–Ω–Ω—è –ø–ª–∞–Ω–∫–∏', '–ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ'),
        ('–ë–µ—Ä–ø—ñ', 1, 15, '–°–µ—Ä–µ–¥–Ω—è', 'intermediate', '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ –≤–ø—Ä–∞–≤–∞ –∑ —Å—Ç—Ä–∏–±–∫–æ–º', '–ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ'),
        ('–ü—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è', 2, 10, '–°–µ—Ä–µ–¥–Ω—è', 'intermediate', '–ü—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è –Ω–∞ —Ç—É—Ä–Ω—ñ–∫—É', '–¢—É—Ä–Ω—ñ–∫')`
    ];

    // –¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á (–ø–∞—Ä–æ–ª—å: password123)
    const testUser = [
        `INSERT INTO users (full_name, email, password, age, gender, weight, height, activity_level) VALUES
        ('–¢–µ—Å—Ç–æ–≤–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á', 'test@example.com', '$2b$10$rQj5XyZjI4LX4ZrHOyV6R.CQBqzZqJYUjK3lGN2qU8L6eWz2H2xJ.', 25, 'male', 75.5, 180, 'moderate')`
    ];

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const userPreferences = [
        `INSERT INTO user_preferences (user_id, fitness_level, daily_calorie_goal) VALUES
        (1, 'intermediate', 2200)`
    ];

    await executeSQLCommands(connection, foodCategories);
    await executeSQLCommands(connection, foodItems);
    await executeSQLCommands(connection, workoutTypes);
    await executeSQLCommands(connection, workoutTemplates);
    await executeSQLCommands(connection, testUser);
    await executeSQLCommands(connection, userPreferences);
};

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
const setupDatabase = async () => {
    let connection;

    try {
        console.log('üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL...');

        // –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        await createDatabase();

        // –ü–æ—Ç—ñ–º –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        connection = await mysql.createConnection(dbConnectionConfig);
        console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MySQL —ñ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö');

        console.log('üîÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å...');
        await createTables(connection);

        console.log('üîÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤...');
        await createIndexes(connection);

        console.log('üîÑ –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏...');
        await insertTestData(connection);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
        console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å...');
        const [tables] = await connection.query(`
            SELECT TABLE_NAME, TABLE_ROWS 
            FROM information_schema.TABLES 
            WHERE TABLE_SCHEMA = ?
        `, [process.env.DB_NAME || 'fitness_app_db']);

        console.log('üìã –°—Ç–≤–æ—Ä–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ:');
        tables.forEach(table => {
            console.log(`   ‚úì ${table.TABLE_NAME} (${table.TABLE_ROWS || 0} –∑–∞–ø–∏—Å—ñ–≤)`);
        });

        console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
        console.log('');
        console.log('üîë –¢–µ—Å—Ç–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç:');
        console.log('   Email: test@example.com');
        console.log('   –ü–∞—Ä–æ–ª—å: password123');
        console.log('');
        console.log('üöÄ –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ—é: npm run dev');

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', error.message);
        console.log('');
        console.log('üîß –ú–æ–∂–ª–∏–≤—ñ —Ä—ñ—à–µ–Ω–Ω—è:');
        console.log('1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π MySQL —Å–µ—Ä–≤–µ—Ä');
        console.log('2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤ .env —Ñ–∞–π–ª—ñ');
        console.log('3. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —î –ø—Ä–∞–≤–∞ –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
        console.log('4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –ª–æ–≥—ñ–Ω–∞ —ñ –ø–∞—Ä–æ–ª—è –¥–ª—è MySQL');
        console.log('');
        console.log('üí° –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:');
        console.log(`   DB_HOST=${process.env.DB_HOST}`);
        console.log(`   DB_USER=${process.env.DB_USER}`);
        console.log(`   DB_NAME=${process.env.DB_NAME}`);
        console.log(`   DB_PORT=${process.env.DB_PORT}`);
        process.exit(1);
    } finally {
        if (connection) {
            await connection.end();
            console.log('üîê –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ MySQL –∑–∞–∫—Ä–∏—Ç–æ');
        }
    }
};

// –ó–∞–ø—É—Å–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
console.log('üèÉ‚Äç‚ôÇÔ∏è FitApp - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
console.log('=====================================');
setupDatabase();