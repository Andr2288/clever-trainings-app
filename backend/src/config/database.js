import mysql from 'mysql2/promise';
import dotenv from 'dotenv';

dotenv.config();

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 3306,
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || '',
    database: process.env.DB_NAME || 'fitness_app_db',
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0,
    charset: 'utf8mb4'
};

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—É–ª—É –∑'—î–¥–Ω–∞–Ω—å
const pool = mysql.createPool(dbConfig);

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
export const testConnection = async () => {
    try {
        const connection = await pool.getConnection();
        console.log('‚úÖ MySQL –±–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
        console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: ${dbConfig.database}`);
        console.log(`üñ•Ô∏è  –•–æ—Å—Ç: ${dbConfig.host}`);
        connection.release();
        return true;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', error.message);
        console.error('üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ .env —Ñ–∞–π–ª—ñ');
        return false;
    }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
export const executeQuery = async (query, params = []) => {
    try {
        const [results] = await pool.execute(query, params);
        return results;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É:', error.message);
        console.error('üìù –ó–∞–ø–∏—Ç:', query);
        console.error('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', params);
        throw error;
    }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
export const executeTransaction = async (queries) => {
    const connection = await pool.getConnection();
    try {
        await connection.beginTransaction();

        const results = [];
        for (const { query, params } of queries) {
            const [result] = await connection.execute(query, params || []);
            results.push(result);
        }

        await connection.commit();
        return results;
    } catch (error) {
        await connection.rollback();
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:', error.message);
        throw error;
    } finally {
        connection.release();
    }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
export const checkTables = async () => {
    try {
        const tables = [
            'users', 'food_categories', 'food_items', 'daily_meals',
            'workout_types', 'workout_templates', 'completed_workouts',
            'user_preferences', 'weight_history'
        ];

        const results = [];
        for (const table of tables) {
            const query = `SELECT COUNT(*) as count FROM ${table}`;
            try {
                const [rows] = await pool.execute(query);
                results.push({ table, exists: true, count: rows[0].count });
            } catch (error) {
                results.push({ table, exists: false, error: error.message });
            }
        }

        return results;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—å:', error.message);
        throw error;
    }
};

// –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—É–ª—É –∑'—î–¥–Ω–∞–Ω—å (–¥–ª—è graceful shutdown)
export const closePool = async () => {
    try {
        await pool.end();
        console.log('üîê MySQL –ø—É–ª –∑\'—î–¥–Ω–∞–Ω—å –∑–∞–∫—Ä–∏—Ç–æ');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –ø—É–ª—É:', error.message);
    }
};

export default pool;