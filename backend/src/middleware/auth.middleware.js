import jwt from 'jsonwebtoken';
import { executeQuery } from '../config/database.js';

const protectRoute = async (req, res, next) => {
    try {
        const token = req.cookies.jwt;

        if (!token) {
            return res.status(401).json({ message: "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–¥–∞–Ω–æ. –ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è" });
        }

        const decoded = jwt.verify(token, process.env.JWT_SECRET);

        if (!decoded) {
            return res.status(401).json({ message: "–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω" });
        }

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        const users = await executeQuery(
            "SELECT id, full_name, email, profile_pic, age, gender, weight, height, activity_level, created_at, updated_at FROM users WHERE id = ?",
            [decoded.userId]
        );

        if (users.length === 0) {
            return res.status(404).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
        }

        const user = users[0];
        req.user = user;

        next();

    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –≤ protectRoute middleware:", error.message);

        if (error.name === 'JsonWebTokenError') {
            return res.status(401).json({ message: "–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω" });
        }

        if (error.name === 'TokenExpiredError') {
            return res.status(401).json({ message: "–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó —Ç–æ–∫–µ–Ω—É –º–∏–Ω—É–≤" });
        }

        return res.status(500).json({ message: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

// Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–ª–µ–π (–¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è)
const requireRole = (roles) => {
    return (req, res, next) => {
        if (!req.user) {
            return res.status(401).json({ message: "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è" });
        }

        // –ü–æ–∫–∏ —â–æ –≤—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–∞—é—Ç—å —Ä–æ–ª—å 'user'
        // –í –º–∞–π–±—É—Ç–Ω—å–æ–º—É –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø–æ–ª–µ role –≤ —Ç–∞–±–ª–∏—Ü—é users
        const userRole = req.user.role || 'user';

        if (!roles.includes(userRole)) {
            return res.status(403).json({ message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É" });
        }

        next();
    };
};

// Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
const logUserActivity = async (req, res, next) => {
    if (req.user) {
        try {
            // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            console.log(`üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${req.user.id} (${req.user.email}) –≤–∏–∫–æ–Ω—É—î ${req.method} ${req.path}`);
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:", error.message);
        }
    }
    next();
};

export default {
    protectRoute,
    requireRole,
    logUserActivity
};