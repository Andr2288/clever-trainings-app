import React, { useState, useEffect } from 'react';
import { Play, RotateCcw, Settings, Trophy, Clock, Loader, Zap } from 'lucide-react';
import toast from 'react-hot-toast';

import { useWorkoutStore } from '../store/useWorkoutStore';
import { useAuthStore } from '../store/useAuthStore';
import WorkoutCard from '../components/WorkoutCard';

const Workouts = () => {
    // UI State
    const [activeWorkoutIndex, setActiveWorkoutIndex] = useState(null);
    const [workoutTimer, setWorkoutTimer] = useState(0);
    const [isTimerRunning, setIsTimerRunning] = useState(false);
    const [showSettings, setShowSettings] = useState(false);

    // Local state for stats
    const [todayStats, setTodayStats] = useState({
        workouts: [],
        stats: { total_workouts: 0, total_duration: 0 }
    });
    const [weeklyStats, setWeeklyStats] = useState({
        total_workouts: 0,
        total_duration: 0,
        workout_types: {}
    });

    // Stores
    const {
        currentWorkouts,
        preferences,
        generateWorkoutsForLevel,
        generateRandomWorkouts,
        completeWorkout,
        setFitnessLevel,
        clearCurrentWorkouts,
        loadTodayWorkouts,
        loadWeeklyStats,
        updatePreferences,
        isLoadingTemplates,
        isLoading
    } = useWorkoutStore();

    const { getUserWeight } = useAuthStore();

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    useEffect(() => {
        const initializeData = async () => {
            try {
                // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                const [todayData, weeklyData] = await Promise.all([
                    loadTodayWorkouts(),
                    loadWeeklyStats()
                ]);

                if (todayData) {
                    setTodayStats(todayData);
                }

                if (weeklyData) {
                    setWeeklyStats(weeklyData);
                }
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            }
        };

        initializeData();
    }, [loadTodayWorkouts, loadWeeklyStats]);

    // –¢–∞–π–º–µ—Ä –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    useEffect(() => {
        let interval = null;
        if (isTimerRunning) {
            interval = setInterval(() => {
                setWorkoutTimer(timer => timer + 1);
            }, 1000);
        } else if (!isTimerRunning && workoutTimer !== 0) {
            clearInterval(interval);
        }
        return () => clearInterval(interval);
    }, [isTimerRunning, workoutTimer]);

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    const handleGenerateWorkouts = async (type = 'level') => {
        try {
            let newWorkouts;
            if (type === 'random') {
                newWorkouts = await generateRandomWorkouts(6);
            } else {
                newWorkouts = await generateWorkoutsForLevel(preferences.fitnessLevel);
            }

            if (newWorkouts && newWorkouts.length > 0) {
                toast.success(`–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ ${newWorkouts.length} —Ç—Ä–µ–Ω—É–≤–∞–Ω—å`);
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:', error);
        }
    };

    const handleStartWorkout = (index) => {
        setActiveWorkoutIndex(index);
        setWorkoutTimer(0);
        setIsTimerRunning(true);
        toast.success('–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –£–¥–∞—á—ñ! üí™');
    };

    const handleCompleteWorkout = async (index) => {
        try {
            const duration = Math.floor(workoutTimer / 60); // –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Ö–≤–∏–ª–∏–Ω–∏
            const completedWorkout = await completeWorkout(index, duration);

            if (completedWorkout) {
                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                const todayData = await loadTodayWorkouts();
                if (todayData) {
                    setTodayStats(todayData);
                }

                const weeklyData = await loadWeeklyStats();
                if (weeklyData) {
                    setWeeklyStats(weeklyData);
                }
            }

            setActiveWorkoutIndex(null);
            setIsTimerRunning(false);
            setWorkoutTimer(0);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:', error);
        }
    };

    const handleStopWorkout = () => {
        if (window.confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑—É–ø–∏–Ω–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è?')) {
            setActiveWorkoutIndex(null);
            setIsTimerRunning(false);
            setWorkoutTimer(0);
            toast.info('–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
        }
    };

    const handleUpdateFitnessLevel = async (level) => {
        try {
            await setFitnessLevel(level);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è:', error);
        }
    };

    const handleUpdateCalorieGoal = async (goal) => {
        try {
            await updatePreferences({ daily_calorie_goal: parseInt(goal) });
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–ª—ñ:', error);
        }
    };

    const formatTime = (seconds) => {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    };

    // –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –ø—Ä–∏–±–ª–∏–∑–Ω—ñ —Å–ø–∞–ª–µ–Ω—ñ –∫–∞–ª–æ—Ä—ñ—ó
    const getEstimatedCalories = (workout) => {
        const userWeight = getUserWeight() || 70;
        const duration = activeWorkoutIndex === currentWorkouts.indexOf(workout)
            ? Math.floor(workoutTimer / 60)
            : workout.duration;

        // –°–ø—Ä–æ—â–µ–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–∞–ª–æ—Ä—ñ–π
        let multiplier = 1;
        switch (workout.type?.toLowerCase()) {
            case '–∫–∞—Ä–¥—ñ–æ': multiplier = 10; break;
            case '—Å–∏–ª–æ–≤—ñ': multiplier = 6; break;
            case 'hiit': multiplier = 12; break;
            default: multiplier = 8;
        }

        // –í—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—ñ
        const intensityMultiplier = workout.intensity?.includes('–í–∏—Å–æ–∫–∞') ? 1.3 :
            workout.intensity?.includes('–°–µ—Ä–µ–¥–Ω—è') ? 1.0 : 0.8;

        return Math.round(duration * multiplier * intensityMultiplier * (userWeight / 70));
    };

    return (
        <div className="min-h-screen bg-gray-100 p-6">
            <div className="max-w-7xl mx-auto">
                <h1 className="text-4xl font-bold text-center text-blue-800 mb-8">
                    –¢—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏–π –¶–µ–Ω—Ç—Ä
                </h1>

                <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
                    {/* –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å */}
                    <div className="lg:col-span-1 space-y-6">
                        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                        <div className="bg-white p-6 rounded-2xl shadow-lg">
                            <h2 className="text-xl font-semibold text-blue-700 mb-4 flex items-center">
                                <Trophy className="mr-2" size={20} />
                                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                            </h2>

                            <div className="space-y-4">
                                <div className="text-center bg-green-50 p-3 rounded-lg">
                                    <p className="text-2xl font-bold text-green-600">
                                        {todayStats.stats.total_workouts || 0}
                                    </p>
                                    <p className="text-sm text-gray-600">–°—å–æ–≥–æ–¥–Ω—ñ</p>
                                </div>

                                <div className="text-center bg-blue-50 p-3 rounded-lg">
                                    <p className="text-2xl font-bold text-blue-600">
                                        {weeklyStats.total_workouts || 0}
                                    </p>
                                    <p className="text-sm text-gray-600">–ó–∞ —Ç–∏–∂–¥–µ–Ω—å</p>
                                </div>

                                <div className="text-center bg-purple-50 p-3 rounded-lg">
                                    <p className="text-2xl font-bold text-purple-600">
                                        {weeklyStats.total_duration || 0}
                                    </p>
                                    <p className="text-sm text-gray-600">–•–≤–∏–ª–∏–Ω –∑–∞ —Ç–∏–∂–¥–µ–Ω—å</p>
                                </div>

                                {weeklyStats.active_days > 0 && (
                                    <div className="text-center bg-orange-50 p-3 rounded-lg">
                                        <p className="text-2xl font-bold text-orange-600">
                                            {weeklyStats.active_days}
                                        </p>
                                        <p className="text-sm text-gray-600">–ê–∫—Ç–∏–≤–Ω–∏—Ö –¥–Ω—ñ–≤</p>
                                    </div>
                                )}
                            </div>

                            {todayStats.workouts.length > 0 && (
                                <div className="mt-4">
                                    <h4 className="text-sm font-medium text-gray-700 mb-2">
                                        –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:
                                    </h4>
                                    {todayStats.workouts.slice(0, 3).map((workout, index) => (
                                        <div key={index} className="text-xs text-gray-600 mb-1 flex justify-between">
                                            <span>{workout.name}</span>
                                            <span>{workout.actualDuration}—Ö–≤</span>
                                        </div>
                                    ))}
                                    {todayStats.workouts.length > 3 && (
                                        <p className="text-xs text-gray-500">
                                            ...—Ç–∞ —â–µ {todayStats.workouts.length - 3}
                                        </p>
                                    )}
                                </div>
                            )}

                            {Object.keys(weeklyStats.workout_types).length > 0 && (
                                <div className="mt-4">
                                    <h4 className="text-sm font-medium text-gray-700 mb-2">
                                        –¢–∏–ø–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è:
                                    </h4>
                                    {Object.entries(weeklyStats.workout_types).map(([type, count]) => (
                                        <div key={type} className="text-xs text-gray-600 mb-1 flex justify-between">
                                            <span>{type}:</span>
                                            <span>{count}</span>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>

                        {/* –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è */}
                        <div className="bg-white p-6 rounded-2xl shadow-lg">
                            <button
                                onClick={() => setShowSettings(!showSettings)}
                                className="w-full flex items-center justify-between text-blue-700 font-semibold mb-4"
                            >
                                <div className="flex items-center">
                                    <Settings className="mr-2" size={20} />
                                    –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                                </div>
                                <span>{showSettings ? '‚àí' : '+'}</span>
                            </button>

                            {showSettings && (
                                <div className="space-y-4">
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-2">
                                            –†—ñ–≤–µ–Ω—å –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏:
                                        </label>
                                        <select
                                            value={preferences.fitnessLevel || 'beginner'}
                                            onChange={(e) => handleUpdateFitnessLevel(e.target.value)}
                                            className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
                                            disabled={isLoading}
                                        >
                                            <option value="beginner">–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å</option>
                                            <option value="intermediate">–°–µ—Ä–µ–¥–Ω—ñ–π</option>
                                            <option value="advanced">–ü—Ä–æ—Å—É–Ω—É—Ç–∏–π</option>
                                        </select>
                                    </div>

                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-2">
                                            –¶—ñ–ª—å –∫–∞–ª–æ—Ä—ñ–π –Ω–∞ –¥–µ–Ω—å:
                                        </label>
                                        <input
                                            type="number"
                                            value={preferences.daily_calorie_goal || 2000}
                                            onChange={(e) => handleUpdateCalorieGoal(e.target.value)}
                                            className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
                                            min="1200"
                                            max="5000"
                                            step="50"
                                        />
                                    </div>

                                    <div className="text-xs text-gray-600">
                                        <p className="mb-1"><strong>–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å:</strong> –õ–µ–≥–∫—ñ –≤–ø—Ä–∞–≤–∏, –∫–æ—Ä–æ—Ç—à–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å</p>
                                        <p className="mb-1"><strong>–°–µ—Ä–µ–¥–Ω—ñ–π:</strong> –ü–æ–º—ñ—Ä–Ω–∞ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å —ñ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å</p>
                                        <p><strong>–ü—Ä–æ—Å—É–Ω—É—Ç–∏–π:</strong> –°–∫–ª–∞–¥–Ω—ñ –≤–ø—Ä–∞–≤–∏, –≤–∏—Å–æ–∫–∞ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å</p>
                                    </div>
                                </div>
                            )}
                        </div>

                        {/* –¢–∞–π–º–µ—Ä —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è */}
                        {activeWorkoutIndex !== null && (
                            <div className="bg-white p-6 rounded-2xl shadow-lg border-2 border-green-500">
                                <h3 className="text-lg font-semibold text-green-700 mb-4 flex items-center">
                                    <Clock className="mr-2" size={20} />
                                    –ê–∫—Ç–∏–≤–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
                                </h3>

                                <div className="text-center mb-4">
                                    <p className="text-3xl font-bold text-green-600 mb-2">
                                        {formatTime(workoutTimer)}
                                    </p>
                                    <p className="text-sm text-gray-600 font-medium">
                                        {currentWorkouts[activeWorkoutIndex]?.name}
                                    </p>
                                    <p className="text-xs text-gray-500 mt-1 flex items-center justify-center">
                                        <Zap size={14} className="mr-1" />
                                        ~{getEstimatedCalories(currentWorkouts[activeWorkoutIndex])} –∫–∫–∞–ª
                                    </p>
                                </div>

                                <div className="flex gap-2 mb-2">
                                    <button
                                        onClick={() => setIsTimerRunning(!isTimerRunning)}
                                        className={`flex-1 px-4 py-2 rounded-lg transition font-medium ${
                                            isTimerRunning
                                                ? 'bg-yellow-600 hover:bg-yellow-700 text-white'
                                                : 'bg-blue-600 hover:bg-blue-700 text-white'
                                        }`}
                                    >
                                        {isTimerRunning ? '–ü–∞—É–∑–∞' : '–°—Ç–∞—Ä—Ç'}
                                    </button>
                                    <button
                                        onClick={() => handleCompleteWorkout(activeWorkoutIndex)}
                                        className="flex-1 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition font-medium"
                                    >
                                        –ó–∞–≤–µ—Ä—à–∏—Ç–∏
                                    </button>
                                </div>

                                <button
                                    onClick={handleStopWorkout}
                                    className="w-full bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition font-medium"
                                >
                                    –°–∫–∞—Å—É–≤–∞—Ç–∏
                                </button>
                            </div>
                        )}
                    </div>

                    {/* –û—Å–Ω–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å */}
                    <div className="lg:col-span-3">
                        {/* –ö–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó */}
                        <div className="bg-white p-6 rounded-2xl shadow-lg mb-6">
                            <div className="flex flex-wrap gap-4 justify-center">
                                <button
                                    onClick={() => handleGenerateWorkouts('level')}
                                    disabled={isLoadingTemplates}
                                    className="bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white px-6 py-3 rounded-xl flex items-center space-x-2 transition font-medium"
                                >
                                    {isLoadingTemplates ? (
                                        <Loader className="animate-spin h-5 w-5" />
                                    ) : (
                                        <Play size={20} />
                                    )}
                                    <span>
                                        {isLoadingTemplates ? '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...' : '–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –º–æ–≥–æ —Ä—ñ–≤–Ω—è'}
                                    </span>
                                </button>

                                <button
                                    onClick={() => handleGenerateWorkouts('random')}
                                    disabled={isLoadingTemplates}
                                    className="bg-purple-600 hover:bg-purple-700 disabled:bg-purple-400 text-white px-6 py-3 rounded-xl flex items-center space-x-2 transition font-medium"
                                >
                                    {isLoadingTemplates ? (
                                        <Loader className="animate-spin h-5 w-5" />
                                    ) : (
                                        <RotateCcw size={20} />
                                    )}
                                    <span>
                                        {isLoadingTemplates ? '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...' : '–í–∏–ø–∞–¥–∫–æ–≤—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è'}
                                    </span>
                                </button>

                                {currentWorkouts.length > 0 && (
                                    <button
                                        onClick={clearCurrentWorkouts}
                                        className="bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-xl transition font-medium"
                                    >
                                        –û—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫
                                    </button>
                                )}
                            </div>

                            {preferences.fitnessLevel && (
                                <div className="mt-4 text-center">
                                    <p className="text-sm text-gray-600">
                                        –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: <span className="font-medium text-blue-600">
                                            {preferences.fitnessLevel === 'beginner' && '–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å'}
                                        {preferences.fitnessLevel === 'intermediate' && '–°–µ—Ä–µ–¥–Ω—ñ–π'}
                                        {preferences.fitnessLevel === 'advanced' && '–ü—Ä–æ—Å—É–Ω—É—Ç–∏–π'}
                                        </span>
                                    </p>
                                </div>
                            )}
                        </div>

                        {/* –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å */}
                        {isLoadingTemplates ? (
                            <div className="bg-white p-8 rounded-2xl shadow-lg text-center">
                                <Loader className="animate-spin h-12 w-12 text-blue-600 mx-auto mb-4" />
                                <p className="text-gray-600 text-lg">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å...</p>
                                <p className="text-gray-500 text-sm mt-2">–ü—ñ–¥–±–∏—Ä–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â—ñ –≤–ø—Ä–∞–≤–∏ –¥–ª—è –≤–∞—Å</p>
                            </div>
                        ) : currentWorkouts.length > 0 ? (
                            <div className="grid gap-6 sm:grid-cols-1 md:grid-cols-2">
                                {currentWorkouts.map((workout, index) => (
                                    <div key={index} className="bg-white rounded-2xl shadow-lg overflow-hidden">
                                        {/* Workout Card Content */}
                                        <div className={`transition-all duration-300 ${
                                            activeWorkoutIndex === index
                                                ? 'ring-4 ring-green-300 shadow-xl'
                                                : ''
                                        }`}>
                                            <WorkoutCard
                                                workout={workout}
                                                isActive={activeWorkoutIndex === index}
                                                showCompletedBadge={false}
                                            />
                                        </div>

                                        {/* Action Buttons */}
                                        <div className="p-4 bg-gray-50 border-t">
                                            {activeWorkoutIndex === index ? (
                                                <div className="bg-green-100 border border-green-300 rounded-lg p-3 text-center">
                                                    <p className="text-green-700 font-medium text-sm mb-1">
                                                        –ê–∫—Ç–∏–≤–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
                                                    </p>
                                                    <p className="text-green-600 font-bold text-lg">
                                                        {formatTime(workoutTimer)}
                                                    </p>
                                                    <p className="text-green-600 text-xs mt-1">
                                                        ~{getEstimatedCalories(workout)} –∫–∫–∞–ª —Å–ø–∞–ª–µ–Ω–æ
                                                    </p>
                                                </div>
                                            ) : (
                                                <button
                                                    onClick={() => handleStartWorkout(index)}
                                                    disabled={activeWorkoutIndex !== null}
                                                    className="w-full bg-green-600 hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white px-4 py-3 rounded-lg flex items-center justify-center space-x-2 transition font-medium shadow-sm hover:shadow-md"
                                                >
                                                    <Play size={18} />
                                                    <span>
                                                        {activeWorkoutIndex !== null ? '–Ü–Ω—à–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–µ' : '–ü–æ—á–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è'}
                                                    </span>
                                                </button>
                                            )}
                                        </div>
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <div className="text-center py-12">
                                <div className="bg-white p-8 rounded-2xl shadow-lg max-w-md mx-auto">
                                    <h3 className="text-xl font-semibold text-gray-700 mb-4">
                                        –ì–æ—Ç–æ–≤—ñ –¥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è?
                                    </h3>
                                    <p className="text-gray-600 mb-6">
                                        –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫ –≤–∏—â–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ –Ω–∞—à–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
                                    </p>
                                    <div className="space-y-2 text-sm text-gray-500">
                                        <p>‚Ä¢ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∞–¥–∞–ø—Ç–æ–≤–∞–Ω—ñ –ø—ñ–¥ –≤–∞—à —Ä—ñ–≤–µ–Ω—å</p>
                                        <p>‚Ä¢ –†—ñ–∑–Ω—ñ —Ç–∏–ø–∏: –∫–∞—Ä–¥—ñ–æ, —Å–∏–ª–æ–≤—ñ, HIIT —Ç–∞ —ñ–Ω—à—ñ</p>
                                        <p>‚Ä¢ –í–±—É–¥–æ–≤–∞–Ω–∏–π —Ç–∞–π–º–µ—Ä –∑ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫–æ–º –∫–∞–ª–æ—Ä—ñ–π</p>
                                        <p>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—é</p>
                                        <p>‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—É</p>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó */}
                        {currentWorkouts.length > 0 && (
                            <div className="mt-8 bg-blue-50 p-6 rounded-2xl">
                                <h3 className="text-lg font-semibold text-blue-700 mb-3">
                                    üí° –ü–æ—Ä–∞–¥–∏ –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:
                                </h3>
                                <ul className="space-y-2 text-sm text-blue-800">
                                    <li>‚Ä¢ –ü–æ—á–Ω—ñ—Ç—å –∑ 5-—Ö–≤–∏–ª–∏–Ω–Ω–æ—ó —Ä–æ–∑–º–∏–Ω–∫–∏</li>
                                    <li>‚Ä¢ –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é —Ç–µ—Ö–Ω—ñ–∫–æ—é –≤–∏–∫–æ–Ω–∞–Ω–Ω—è</li>
                                    <li>‚Ä¢ –†–æ–±—ñ—Ç—å –ø–µ—Ä–µ—Ä–≤–∏ –º—ñ–∂ –≤–ø—Ä–∞–≤–∞–º–∏ (30-60 —Å–µ–∫—É–Ω–¥)</li>
                                    <li>‚Ä¢ –ü–∏–π—Ç–µ –≤–æ–¥—É –ø—ñ–¥ —á–∞—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è</li>
                                    <li>‚Ä¢ –ó–∞–≤–µ—Ä—à—ñ—Ç—å –∑–∞–º–∏–Ω–∫–æ—é —Ç–∞ —Ä–æ–∑—Ç—è–∂–∫–æ—é</li>
                                    <li>‚Ä¢ –°–ª—É—Ö–∞–π—Ç–µ —Å–≤–æ—î —Ç—ñ–ª–æ - –ø—Ä–∏ –±–æ–ª—é –∑—É–ø–∏–Ω—ñ—Ç—å—Å—è</li>
                                </ul>

                                <div className="mt-4 p-3 bg-blue-100 rounded-lg">
                                    <p className="text-blue-800 text-sm">
                                        <strong>üéØ –í–∞—à–∞ —Ü—ñ–ª—å:</strong> {preferences.daily_calorie_goal || 2000} –∫–∫–∞–ª –Ω–∞ –¥–µ–Ω—å
                                    </p>
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Workouts;